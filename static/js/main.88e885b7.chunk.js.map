{"version":3,"sources":["Person/Person.js","App.js","index.js"],"names":["Person","props","className","onClick","click","name","age","type","value","onChange","changed","App","state","persons","id","showToggle","changeNameHandler","newName","setState","updateNameHandler","event","personIndex","findIndex","p","person","target","personList","toggleHandler","ShowOrNot","deletePersonHandler","PersonIndex","slice","myIndex","splice","this","map","index","key","style","marginLeft","marginRight","marginTop","marginBottom","width","display","Component","ReactDOM","render","document","getElementById"],"mappings":"qNAceA,G,MAXA,SAACC,GACd,OACE,yBAAKC,UAAU,UACb,uBAAGC,QAASF,EAAMG,OAAlB,cACcH,EAAMI,KADpB,aACoCJ,EAAMK,IAD1C,eAGA,2BAAOC,KAAK,OAAOC,MAAOP,EAAMI,KAAMI,SAAUR,EAAMS,aCgF7CC,E,4MApFbC,MAAQ,CACNC,QAAS,CACP,CAAEC,GAAI,GAAIT,KAAM,MAAOC,IAAK,IAC5B,CAAEQ,GAAI,GAAIT,KAAM,OAAQC,IAAK,IAC7B,CAAEQ,GAAI,GAAIT,KAAM,QAASC,IAAK,KAEhCS,YAAY,G,EAGdC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZL,QAAS,CACP,CAAEC,GAAI,GAAIT,KAAMY,EAASX,IAAK,IAC9B,CAAEQ,GAAI,GAAIT,KAAM,OAAQC,IAAK,IAC7B,CAAEQ,GAAI,GAAIT,KAAM,QAASC,IAAK,Q,EAKpCa,kBAAoB,SAACC,EAAON,GAC1B,IAAMO,EAAc,EAAKT,MAAMC,QAAQS,WAAU,SAACC,GAChD,OAAOA,EAAET,KAAOA,KAEZU,EAAM,eAAQ,EAAKZ,MAAMC,QAAQQ,IACvCG,EAAOnB,KAAOe,EAAMK,OAAOjB,MAC3B,IAAMkB,EAAU,YAAO,EAAKd,MAAMC,SAClCa,EAAWL,GAAeG,EAC1B,EAAKN,SAAS,CAAEL,QAASa,K,EAG3BC,cAAgB,WACd,IAAIC,GAAa,EAAKhB,MAAMG,WAC5B,EAAKG,SAAS,CAAEH,WAAYa,K,EAG9BC,oBAAsB,SAACC,GACrB,IAAMJ,EAAa,EAAKd,MAAMC,QAAQkB,QAChCC,EAAUN,EAAWJ,WAAU,SAACC,GACpC,OAAOA,EAAET,KAAOgB,KAElBJ,EAAWO,OAAOD,EAAS,GAC3B,EAAKd,SAAS,CAAEL,QAASa,K,uDAGjB,IAAD,OAUHb,EAAU,KAkBd,OAjBIqB,KAAKtB,MAAMG,aACbF,EACE,6BACGqB,KAAKtB,MAAMC,QAAQsB,KAAI,SAACZ,EAAGa,GAC1B,OACE,kBAAC,EAAD,CACE/B,KAAMkB,EAAElB,KACRC,IAAKiB,EAAEjB,IACP+B,IAAKd,EAAET,GACPV,MAAO,kBAAM,EAAKyB,oBAAoBN,EAAET,KACxCJ,QAAS,SAACU,GAAD,OAAW,EAAKD,kBAAkBC,EAAOG,EAAET,YAQ9D,6BACE,4BAAQP,KAAK,SAAS+B,MA7BV,CACdC,WAAY,OACZC,YAAa,OACbC,UAAW,OACXC,aAAc,OACdC,MAAO,MACPC,QAAS,SAuB+BzC,QAAS+B,KAAKP,eAApD,YAGCd,O,GA9ESgC,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.88e885b7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Person.css\";\r\n\r\nconst Person = (props) => {\r\n  return (\r\n    <div className=\"mycard\">\r\n      <p onClick={props.click}>\r\n        My name is {props.name} and I am {props.age} years old.\r\n      </p>\r\n      <input type=\"text\" value={props.name} onChange={props.changed} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React, { Component } from \"react\";\nimport Person from \"./Person/Person\";\n// import People from \"./People\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: 12, name: \"Ali\", age: 29 },\n      { id: 13, name: \"Reza\", age: 32 },\n      { id: 14, name: \"Hamid\", age: 36 },\n    ],\n    showToggle: false,\n  };\n\n  changeNameHandler = (newName) => {\n    this.setState({\n      persons: [\n        { id: 12, name: newName, age: 29 },\n        { id: 13, name: \"Reza\", age: 32 },\n        { id: 14, name: \"Hamid\", age: 36 },\n      ],\n    });\n  };\n\n  updateNameHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex((p) => {\n      return p.id === id;\n    });\n    const person = { ...this.state.persons[personIndex] };\n    person.name = event.target.value;\n    const personList = [...this.state.persons];\n    personList[personIndex] = person;\n    this.setState({ persons: personList });\n  };\n\n  toggleHandler = () => {\n    let ShowOrNot = !this.state.showToggle;\n    this.setState({ showToggle: ShowOrNot });\n  };\n\n  deletePersonHandler = (PersonIndex) => {\n    const personList = this.state.persons.slice();\n    const myIndex = personList.findIndex((p) => {\n      return p.id === PersonIndex;\n    });\n    personList.splice(myIndex, 1);\n    this.setState({ persons: personList });\n  };\n\n  render() {\n    const myStyle = {\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      marginTop: \"30px\",\n      marginBottom: \"20px\",\n      width: \"20%\",\n      display: \"block\",\n    };\n\n    let persons = null;\n    if (this.state.showToggle) {\n      persons = (\n        <div>\n          {this.state.persons.map((p, index) => {\n            return (\n              <Person\n                name={p.name}\n                age={p.age}\n                key={p.id}\n                click={() => this.deletePersonHandler(p.id)}\n                changed={(event) => this.updateNameHandler(event, p.id)}\n              />\n            );\n          })}\n        </div>\n      );\n    }\n    return (\n      <div>\n        <button type=\"button\" style={myStyle} onClick={this.toggleHandler}>\n          Click Me\n        </button>\n        {persons}\n        {/* <People /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}